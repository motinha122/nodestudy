Big-O-Notation

> Measures the worst-case complexity of an algorithm

O(1) -> Constant time

O(n) -> Linear time

function linear(n){ 
    for (let i = 0 ; i < n ; i++){
        console.log(i)
    }
}

O(n^2) -> Quadratic time 

function quadratic(n) {
    let counter = 0;
    for (let i = 0 ; i < n ; i++){
        for (let j = 0 ; j < n ;j++){
            counter++;
        }
    }
    return counter;
}

O(n^3) -> Cubic time 

function cubic(n) {
    let counter = 0;
    for (let i = 0 ; i < n ; i++){
        for (let j = 0 ; j < n ;j++){
            for (let k = 0 ; k < n ;k++){
                counter++;
            }
        }
    }
    return counter;
}

1. Find the fastest growing term
2. Take out the coefficient 